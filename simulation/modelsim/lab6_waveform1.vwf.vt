// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/25/2020 02:22:20"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    lab6_diagram
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module lab6_diagram_vlg_sample_tst(
	A,
	B,
	clock,
	data_in,
	EN1,
	reset_A,
	reset_B,
	reset_fsm,
	sampler_tx
);
input [7:0] A;
input [7:0] B;
input  clock;
input  data_in;
input  EN1;
input  reset_A;
input  reset_B;
input  reset_fsm;
output sampler_tx;

reg sample;
time current_time;
always @(A or B or clock or data_in or EN1 or reset_A or reset_B or reset_fsm)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module lab6_diagram_vlg_check_tst (
	neg,
	OP,
	out1,
	out2,
	sign,
	state,
	sampler_rx
);
input [1:7] neg;
input [15:0] OP;
input [1:7] out1;
input [1:7] out2;
input  sign;
input [0:6] state;
input sampler_rx;

reg [1:7] neg_expected;
reg [15:0] OP_expected;
reg [1:7] out1_expected;
reg [1:7] out2_expected;
reg  sign_expected;
reg [0:6] state_expected;

reg [1:7] neg_prev;
reg [15:0] OP_prev;
reg [1:7] out1_prev;
reg [1:7] out2_prev;
reg  sign_prev;
reg [0:6] state_prev;

reg [1:7] neg_expected_prev;
reg [15:0] OP_expected_prev;
reg [1:7] out1_expected_prev;
reg [1:7] out2_expected_prev;
reg  sign_expected_prev;
reg [0:6] state_expected_prev;

reg [1:7] last_neg_exp;
reg [15:0] last_OP_exp;
reg [1:7] last_out1_exp;
reg [1:7] last_out2_exp;
reg  last_sign_exp;
reg [0:6] last_state_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:6] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 6'b1;
end

// update real /o prevs

always @(trigger)
begin
	neg_prev = neg;
	OP_prev = OP;
	out1_prev = out1;
	out2_prev = out2;
	sign_prev = sign;
	state_prev = state;
end

// update expected /o prevs

always @(trigger)
begin
	neg_expected_prev = neg_expected;
	OP_expected_prev = OP_expected;
	out1_expected_prev = out1_expected;
	out2_expected_prev = out2_expected;
	sign_expected_prev = sign_expected;
	state_expected_prev = state_expected;
end



// expected neg[1]
initial
begin
	neg_expected[1] = 1'bX;
end 

// expected neg[2]
initial
begin
	neg_expected[2] = 1'bX;
end 

// expected neg[3]
initial
begin
	neg_expected[3] = 1'bX;
end 

// expected neg[4]
initial
begin
	neg_expected[4] = 1'bX;
end 

// expected neg[5]
initial
begin
	neg_expected[5] = 1'bX;
end 

// expected neg[6]
initial
begin
	neg_expected[6] = 1'bX;
end 

// expected neg[7]
initial
begin
	neg_expected[7] = 1'bX;
end 
// expected OP[ 15 ]
initial
begin
	OP_expected[15] = 1'bX;
end 
// expected OP[ 14 ]
initial
begin
	OP_expected[14] = 1'bX;
end 
// expected OP[ 13 ]
initial
begin
	OP_expected[13] = 1'bX;
end 
// expected OP[ 12 ]
initial
begin
	OP_expected[12] = 1'bX;
end 
// expected OP[ 11 ]
initial
begin
	OP_expected[11] = 1'bX;
end 
// expected OP[ 10 ]
initial
begin
	OP_expected[10] = 1'bX;
end 
// expected OP[ 9 ]
initial
begin
	OP_expected[9] = 1'bX;
end 
// expected OP[ 8 ]
initial
begin
	OP_expected[8] = 1'bX;
end 
// expected OP[ 7 ]
initial
begin
	OP_expected[7] = 1'bX;
end 
// expected OP[ 6 ]
initial
begin
	OP_expected[6] = 1'bX;
end 
// expected OP[ 5 ]
initial
begin
	OP_expected[5] = 1'bX;
end 
// expected OP[ 4 ]
initial
begin
	OP_expected[4] = 1'bX;
end 
// expected OP[ 3 ]
initial
begin
	OP_expected[3] = 1'bX;
end 
// expected OP[ 2 ]
initial
begin
	OP_expected[2] = 1'bX;
end 
// expected OP[ 1 ]
initial
begin
	OP_expected[1] = 1'bX;
end 
// expected OP[ 0 ]
initial
begin
	OP_expected[0] = 1'bX;
end 

// expected out1[1]
initial
begin
	out1_expected[1] = 1'bX;
end 

// expected out1[2]
initial
begin
	out1_expected[2] = 1'bX;
end 

// expected out1[3]
initial
begin
	out1_expected[3] = 1'bX;
end 

// expected out1[4]
initial
begin
	out1_expected[4] = 1'bX;
end 

// expected out1[5]
initial
begin
	out1_expected[5] = 1'bX;
end 

// expected out1[6]
initial
begin
	out1_expected[6] = 1'bX;
end 

// expected out1[7]
initial
begin
	out1_expected[7] = 1'bX;
end 

// expected out2[1]
initial
begin
	out2_expected[1] = 1'bX;
end 

// expected out2[2]
initial
begin
	out2_expected[2] = 1'bX;
end 

// expected out2[3]
initial
begin
	out2_expected[3] = 1'bX;
end 

// expected out2[4]
initial
begin
	out2_expected[4] = 1'bX;
end 

// expected out2[5]
initial
begin
	out2_expected[5] = 1'bX;
end 

// expected out2[6]
initial
begin
	out2_expected[6] = 1'bX;
end 

// expected out2[7]
initial
begin
	out2_expected[7] = 1'bX;
end 

// expected sign
initial
begin
	sign_expected = 1'bX;
end 
// expected state[ 6 ]
initial
begin
	state_expected[6] = 1'bX;
end 
// expected state[ 5 ]
initial
begin
	state_expected[5] = 1'bX;
end 
// expected state[ 4 ]
initial
begin
	state_expected[4] = 1'bX;
end 
// expected state[ 3 ]
initial
begin
	state_expected[3] = 1'bX;
end 
// expected state[ 2 ]
initial
begin
	state_expected[2] = 1'bX;
end 
// expected state[ 1 ]
initial
begin
	state_expected[1] = 1'bX;
end 
// expected state[ 0 ]
initial
begin
	state_expected[0] = 1'bX;
end 
// generate trigger
always @(neg_expected or neg or OP_expected or OP or out1_expected or out1 or out2_expected or out2 or sign_expected or sign or state_expected or state)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected neg = %b | expected OP = %b | expected out1 = %b | expected out2 = %b | expected sign = %b | expected state = %b | ",neg_expected_prev,OP_expected_prev,out1_expected_prev,out2_expected_prev,sign_expected_prev,state_expected_prev);
	$display("| real neg = %b | real OP = %b | real out1 = %b | real out2 = %b | real sign = %b | real state = %b | ",neg_prev,OP_prev,out1_prev,out2_prev,sign_prev,state_prev);
`endif
	if (
		( neg_expected_prev[0] !== 1'bx ) && ( neg_prev[0] !== neg_expected_prev[0] )
		&& ((neg_expected_prev[0] !== last_neg_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port neg[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", neg_expected_prev);
		$display ("     Real value = %b", neg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_neg_exp[0] = neg_expected_prev[0];
	end
	if (
		( neg_expected_prev[1] !== 1'bx ) && ( neg_prev[1] !== neg_expected_prev[1] )
		&& ((neg_expected_prev[1] !== last_neg_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port neg[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", neg_expected_prev);
		$display ("     Real value = %b", neg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_neg_exp[1] = neg_expected_prev[1];
	end
	if (
		( neg_expected_prev[2] !== 1'bx ) && ( neg_prev[2] !== neg_expected_prev[2] )
		&& ((neg_expected_prev[2] !== last_neg_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port neg[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", neg_expected_prev);
		$display ("     Real value = %b", neg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_neg_exp[2] = neg_expected_prev[2];
	end
	if (
		( neg_expected_prev[3] !== 1'bx ) && ( neg_prev[3] !== neg_expected_prev[3] )
		&& ((neg_expected_prev[3] !== last_neg_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port neg[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", neg_expected_prev);
		$display ("     Real value = %b", neg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_neg_exp[3] = neg_expected_prev[3];
	end
	if (
		( neg_expected_prev[4] !== 1'bx ) && ( neg_prev[4] !== neg_expected_prev[4] )
		&& ((neg_expected_prev[4] !== last_neg_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port neg[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", neg_expected_prev);
		$display ("     Real value = %b", neg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_neg_exp[4] = neg_expected_prev[4];
	end
	if (
		( neg_expected_prev[5] !== 1'bx ) && ( neg_prev[5] !== neg_expected_prev[5] )
		&& ((neg_expected_prev[5] !== last_neg_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port neg[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", neg_expected_prev);
		$display ("     Real value = %b", neg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_neg_exp[5] = neg_expected_prev[5];
	end
	if (
		( neg_expected_prev[6] !== 1'bx ) && ( neg_prev[6] !== neg_expected_prev[6] )
		&& ((neg_expected_prev[6] !== last_neg_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port neg[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", neg_expected_prev);
		$display ("     Real value = %b", neg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_neg_exp[6] = neg_expected_prev[6];
	end
	if (
		( OP_expected_prev[0] !== 1'bx ) && ( OP_prev[0] !== OP_expected_prev[0] )
		&& ((OP_expected_prev[0] !== last_OP_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OP[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OP_expected_prev);
		$display ("     Real value = %b", OP_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_OP_exp[0] = OP_expected_prev[0];
	end
	if (
		( OP_expected_prev[1] !== 1'bx ) && ( OP_prev[1] !== OP_expected_prev[1] )
		&& ((OP_expected_prev[1] !== last_OP_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OP[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OP_expected_prev);
		$display ("     Real value = %b", OP_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_OP_exp[1] = OP_expected_prev[1];
	end
	if (
		( OP_expected_prev[2] !== 1'bx ) && ( OP_prev[2] !== OP_expected_prev[2] )
		&& ((OP_expected_prev[2] !== last_OP_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OP[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OP_expected_prev);
		$display ("     Real value = %b", OP_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_OP_exp[2] = OP_expected_prev[2];
	end
	if (
		( OP_expected_prev[3] !== 1'bx ) && ( OP_prev[3] !== OP_expected_prev[3] )
		&& ((OP_expected_prev[3] !== last_OP_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OP[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OP_expected_prev);
		$display ("     Real value = %b", OP_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_OP_exp[3] = OP_expected_prev[3];
	end
	if (
		( OP_expected_prev[4] !== 1'bx ) && ( OP_prev[4] !== OP_expected_prev[4] )
		&& ((OP_expected_prev[4] !== last_OP_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OP[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OP_expected_prev);
		$display ("     Real value = %b", OP_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_OP_exp[4] = OP_expected_prev[4];
	end
	if (
		( OP_expected_prev[5] !== 1'bx ) && ( OP_prev[5] !== OP_expected_prev[5] )
		&& ((OP_expected_prev[5] !== last_OP_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OP[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OP_expected_prev);
		$display ("     Real value = %b", OP_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_OP_exp[5] = OP_expected_prev[5];
	end
	if (
		( OP_expected_prev[6] !== 1'bx ) && ( OP_prev[6] !== OP_expected_prev[6] )
		&& ((OP_expected_prev[6] !== last_OP_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OP[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OP_expected_prev);
		$display ("     Real value = %b", OP_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_OP_exp[6] = OP_expected_prev[6];
	end
	if (
		( OP_expected_prev[7] !== 1'bx ) && ( OP_prev[7] !== OP_expected_prev[7] )
		&& ((OP_expected_prev[7] !== last_OP_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OP[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OP_expected_prev);
		$display ("     Real value = %b", OP_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_OP_exp[7] = OP_expected_prev[7];
	end
	if (
		( OP_expected_prev[8] !== 1'bx ) && ( OP_prev[8] !== OP_expected_prev[8] )
		&& ((OP_expected_prev[8] !== last_OP_exp[8]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OP[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OP_expected_prev);
		$display ("     Real value = %b", OP_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_OP_exp[8] = OP_expected_prev[8];
	end
	if (
		( OP_expected_prev[9] !== 1'bx ) && ( OP_prev[9] !== OP_expected_prev[9] )
		&& ((OP_expected_prev[9] !== last_OP_exp[9]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OP[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OP_expected_prev);
		$display ("     Real value = %b", OP_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_OP_exp[9] = OP_expected_prev[9];
	end
	if (
		( OP_expected_prev[10] !== 1'bx ) && ( OP_prev[10] !== OP_expected_prev[10] )
		&& ((OP_expected_prev[10] !== last_OP_exp[10]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OP[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OP_expected_prev);
		$display ("     Real value = %b", OP_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_OP_exp[10] = OP_expected_prev[10];
	end
	if (
		( OP_expected_prev[11] !== 1'bx ) && ( OP_prev[11] !== OP_expected_prev[11] )
		&& ((OP_expected_prev[11] !== last_OP_exp[11]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OP[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OP_expected_prev);
		$display ("     Real value = %b", OP_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_OP_exp[11] = OP_expected_prev[11];
	end
	if (
		( OP_expected_prev[12] !== 1'bx ) && ( OP_prev[12] !== OP_expected_prev[12] )
		&& ((OP_expected_prev[12] !== last_OP_exp[12]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OP[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OP_expected_prev);
		$display ("     Real value = %b", OP_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_OP_exp[12] = OP_expected_prev[12];
	end
	if (
		( OP_expected_prev[13] !== 1'bx ) && ( OP_prev[13] !== OP_expected_prev[13] )
		&& ((OP_expected_prev[13] !== last_OP_exp[13]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OP[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OP_expected_prev);
		$display ("     Real value = %b", OP_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_OP_exp[13] = OP_expected_prev[13];
	end
	if (
		( OP_expected_prev[14] !== 1'bx ) && ( OP_prev[14] !== OP_expected_prev[14] )
		&& ((OP_expected_prev[14] !== last_OP_exp[14]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OP[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OP_expected_prev);
		$display ("     Real value = %b", OP_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_OP_exp[14] = OP_expected_prev[14];
	end
	if (
		( OP_expected_prev[15] !== 1'bx ) && ( OP_prev[15] !== OP_expected_prev[15] )
		&& ((OP_expected_prev[15] !== last_OP_exp[15]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OP[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OP_expected_prev);
		$display ("     Real value = %b", OP_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_OP_exp[15] = OP_expected_prev[15];
	end
	if (
		( out1_expected_prev[0] !== 1'bx ) && ( out1_prev[0] !== out1_expected_prev[0] )
		&& ((out1_expected_prev[0] !== last_out1_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out1_expected_prev);
		$display ("     Real value = %b", out1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_out1_exp[0] = out1_expected_prev[0];
	end
	if (
		( out1_expected_prev[1] !== 1'bx ) && ( out1_prev[1] !== out1_expected_prev[1] )
		&& ((out1_expected_prev[1] !== last_out1_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out1_expected_prev);
		$display ("     Real value = %b", out1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_out1_exp[1] = out1_expected_prev[1];
	end
	if (
		( out1_expected_prev[2] !== 1'bx ) && ( out1_prev[2] !== out1_expected_prev[2] )
		&& ((out1_expected_prev[2] !== last_out1_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out1[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out1_expected_prev);
		$display ("     Real value = %b", out1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_out1_exp[2] = out1_expected_prev[2];
	end
	if (
		( out1_expected_prev[3] !== 1'bx ) && ( out1_prev[3] !== out1_expected_prev[3] )
		&& ((out1_expected_prev[3] !== last_out1_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out1[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out1_expected_prev);
		$display ("     Real value = %b", out1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_out1_exp[3] = out1_expected_prev[3];
	end
	if (
		( out1_expected_prev[4] !== 1'bx ) && ( out1_prev[4] !== out1_expected_prev[4] )
		&& ((out1_expected_prev[4] !== last_out1_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out1[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out1_expected_prev);
		$display ("     Real value = %b", out1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_out1_exp[4] = out1_expected_prev[4];
	end
	if (
		( out1_expected_prev[5] !== 1'bx ) && ( out1_prev[5] !== out1_expected_prev[5] )
		&& ((out1_expected_prev[5] !== last_out1_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out1[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out1_expected_prev);
		$display ("     Real value = %b", out1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_out1_exp[5] = out1_expected_prev[5];
	end
	if (
		( out1_expected_prev[6] !== 1'bx ) && ( out1_prev[6] !== out1_expected_prev[6] )
		&& ((out1_expected_prev[6] !== last_out1_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out1[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out1_expected_prev);
		$display ("     Real value = %b", out1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_out1_exp[6] = out1_expected_prev[6];
	end
	if (
		( out2_expected_prev[0] !== 1'bx ) && ( out2_prev[0] !== out2_expected_prev[0] )
		&& ((out2_expected_prev[0] !== last_out2_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out2[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out2_expected_prev);
		$display ("     Real value = %b", out2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_out2_exp[0] = out2_expected_prev[0];
	end
	if (
		( out2_expected_prev[1] !== 1'bx ) && ( out2_prev[1] !== out2_expected_prev[1] )
		&& ((out2_expected_prev[1] !== last_out2_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out2[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out2_expected_prev);
		$display ("     Real value = %b", out2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_out2_exp[1] = out2_expected_prev[1];
	end
	if (
		( out2_expected_prev[2] !== 1'bx ) && ( out2_prev[2] !== out2_expected_prev[2] )
		&& ((out2_expected_prev[2] !== last_out2_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out2[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out2_expected_prev);
		$display ("     Real value = %b", out2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_out2_exp[2] = out2_expected_prev[2];
	end
	if (
		( out2_expected_prev[3] !== 1'bx ) && ( out2_prev[3] !== out2_expected_prev[3] )
		&& ((out2_expected_prev[3] !== last_out2_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out2[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out2_expected_prev);
		$display ("     Real value = %b", out2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_out2_exp[3] = out2_expected_prev[3];
	end
	if (
		( out2_expected_prev[4] !== 1'bx ) && ( out2_prev[4] !== out2_expected_prev[4] )
		&& ((out2_expected_prev[4] !== last_out2_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out2[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out2_expected_prev);
		$display ("     Real value = %b", out2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_out2_exp[4] = out2_expected_prev[4];
	end
	if (
		( out2_expected_prev[5] !== 1'bx ) && ( out2_prev[5] !== out2_expected_prev[5] )
		&& ((out2_expected_prev[5] !== last_out2_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out2[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out2_expected_prev);
		$display ("     Real value = %b", out2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_out2_exp[5] = out2_expected_prev[5];
	end
	if (
		( out2_expected_prev[6] !== 1'bx ) && ( out2_prev[6] !== out2_expected_prev[6] )
		&& ((out2_expected_prev[6] !== last_out2_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out2[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out2_expected_prev);
		$display ("     Real value = %b", out2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_out2_exp[6] = out2_expected_prev[6];
	end
	if (
		( sign_expected_prev !== 1'bx ) && ( sign_prev !== sign_expected_prev )
		&& ((sign_expected_prev !== last_sign_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sign :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sign_expected_prev);
		$display ("     Real value = %b", sign_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_sign_exp = sign_expected_prev;
	end
	if (
		( state_expected_prev[0] !== 1'bx ) && ( state_prev[0] !== state_expected_prev[0] )
		&& ((state_expected_prev[0] !== last_state_exp[0]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port state[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", state_expected_prev);
		$display ("     Real value = %b", state_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_state_exp[0] = state_expected_prev[0];
	end
	if (
		( state_expected_prev[1] !== 1'bx ) && ( state_prev[1] !== state_expected_prev[1] )
		&& ((state_expected_prev[1] !== last_state_exp[1]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port state[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", state_expected_prev);
		$display ("     Real value = %b", state_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_state_exp[1] = state_expected_prev[1];
	end
	if (
		( state_expected_prev[2] !== 1'bx ) && ( state_prev[2] !== state_expected_prev[2] )
		&& ((state_expected_prev[2] !== last_state_exp[2]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port state[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", state_expected_prev);
		$display ("     Real value = %b", state_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_state_exp[2] = state_expected_prev[2];
	end
	if (
		( state_expected_prev[3] !== 1'bx ) && ( state_prev[3] !== state_expected_prev[3] )
		&& ((state_expected_prev[3] !== last_state_exp[3]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port state[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", state_expected_prev);
		$display ("     Real value = %b", state_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_state_exp[3] = state_expected_prev[3];
	end
	if (
		( state_expected_prev[4] !== 1'bx ) && ( state_prev[4] !== state_expected_prev[4] )
		&& ((state_expected_prev[4] !== last_state_exp[4]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port state[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", state_expected_prev);
		$display ("     Real value = %b", state_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_state_exp[4] = state_expected_prev[4];
	end
	if (
		( state_expected_prev[5] !== 1'bx ) && ( state_prev[5] !== state_expected_prev[5] )
		&& ((state_expected_prev[5] !== last_state_exp[5]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port state[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", state_expected_prev);
		$display ("     Real value = %b", state_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_state_exp[5] = state_expected_prev[5];
	end
	if (
		( state_expected_prev[6] !== 1'bx ) && ( state_prev[6] !== state_expected_prev[6] )
		&& ((state_expected_prev[6] !== last_state_exp[6]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port state[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", state_expected_prev);
		$display ("     Real value = %b", state_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_state_exp[6] = state_expected_prev[6];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$stop;
end 
endmodule

module lab6_diagram_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [7:0] A;
reg [7:0] B;
reg clock;
reg data_in;
reg EN1;
reg reset_A;
reg reset_B;
reg reset_fsm;
// wires                                               
wire [1:7] neg;
wire [15:0] OP;
wire [1:7] out1;
wire [1:7] out2;
wire sign;
wire [0:6] state;

wire sampler;                             

// assign statements (if any)                          
lab6_diagram i1 (
// port map - connection between master ports and signals/registers   
	.A(A),
	.B(B),
	.clock(clock),
	.data_in(data_in),
	.EN1(EN1),
	.neg(neg),
	.OP(OP),
	.out1(out1),
	.out2(out2),
	.reset_A(reset_A),
	.reset_B(reset_B),
	.reset_fsm(reset_fsm),
	.sign(sign),
	.state(state)
);
// A[ 7 ]
initial
begin
	A[7] = 1'b0;
end 
// A[ 6 ]
initial
begin
	A[6] = 1'b1;
end 
// A[ 5 ]
initial
begin
	A[5] = 1'b1;
end 
// A[ 4 ]
initial
begin
	A[4] = 1'b1;
end 
// A[ 3 ]
initial
begin
	A[3] = 1'b0;
end 
// A[ 2 ]
initial
begin
	A[2] = 1'b1;
end 
// A[ 1 ]
initial
begin
	A[1] = 1'b0;
end 
// A[ 0 ]
initial
begin
	A[0] = 1'b0;
end 
// B[ 7 ]
initial
begin
	B[7] = 1'b1;
end 
// B[ 6 ]
initial
begin
	B[6] = 1'b0;
end 
// B[ 5 ]
initial
begin
	B[5] = 1'b0;
end 
// B[ 4 ]
initial
begin
	B[4] = 1'b1;
end 
// B[ 3 ]
initial
begin
	B[3] = 1'b0;
end 
// B[ 2 ]
initial
begin
	B[2] = 1'b1;
end 
// B[ 1 ]
initial
begin
	B[1] = 1'b0;
end 
// B[ 0 ]
initial
begin
	B[0] = 1'b0;
end 

// clock
always
begin
	clock = 1'b0;
	clock = #10000 1'b1;
	#10000;
end 

// data_in
initial
begin
	data_in = 1'b1;
end 

// EN1
initial
begin
	EN1 = 1'b1;
end 

// reset_A
initial
begin
	reset_A = 1'b1;
end 

// reset_B
initial
begin
	reset_B = 1'b1;
end 

// reset_fsm
initial
begin
	reset_fsm = 1'b0;
end 

lab6_diagram_vlg_sample_tst tb_sample (
	.A(A),
	.B(B),
	.clock(clock),
	.data_in(data_in),
	.EN1(EN1),
	.reset_A(reset_A),
	.reset_B(reset_B),
	.reset_fsm(reset_fsm),
	.sampler_tx(sampler)
);

lab6_diagram_vlg_check_tst tb_out(
	.neg(neg),
	.OP(OP),
	.out1(out1),
	.out2(out2),
	.sign(sign),
	.state(state),
	.sampler_rx(sampler)
);
endmodule

